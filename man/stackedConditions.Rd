% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condition_context.R, R/stack_condition.R
\name{stackedConditions}
\alias{setConditionContext}
\alias{setErrorContext}
\alias{setMessageContext}
\alias{setWarningContext}
\alias{stackCondition}
\alias{stackError}
\alias{stackMessage}
\alias{stackWarning}
\alias{stackedConditions}
\title{Conditional Stack-Based Errors and Conditions}
\usage{
setConditionContext(class, message = character(), base_class = NULL,
  call = NULL, type = "none", ...)

setErrorContext(class, message = character(), base_class = NULL,
  call = NULL, ...)

setWarningContext(class, message = character(), base_class = NULL,
  call = NULL, ...)

setMessageContext(class, message = character(), base_class = NULL,
  call = NULL, ...)

stackCondition(message, class = character(), base_class = NULL,
  call = NULL, type = "none", ...)

stackError(message, class = character(), base_class = NULL, call = NULL,
  ...)

stackWarning(message, class = character(), base_class = NULL, call = NULL,
  ...)

stackMessage(message, class = character(), base_class = NULL, call = NULL,
  ...)
}
\arguments{
\item{class}{a character vector of classes the condition object to be
constructed should inherit form (from general to specific). "error",
"warning" or "message" and "condition" are automatically added. This can
also be an empty character vector for code{stack*} or if \code{base_class}
is given.}

\item{message}{an error message as a character string. For \code{set*Context}
this can also be an empty character vector or a character vector of error
messages with at most one unnamed element. The names of the elements
indicate which message to use conditional on the lower level condition
classes: these classes are considered from specific to general and as soon
as a matching element in \code{message} is found, it is used. If this
search is unsuccessful, the unnamed element of \code{message} is used. If
no such element is present, then no message from this context will be used.}

\item{base_class}{a character string or \code{NULL}. If given, it acts as a
filter, i.e. only contexts of the same base class as the one specified when
calling \code{stack*} are considered for the construction of the condition
object, which will then also inherit from \code{base_class}.}

\item{call}{a logical value or \code{NULL}. Should the parent call be used as
the call element of the condition object to construct? The default
\code{NULL} is equivalent to using \code{TRUE} on the highest level and
\code{FALSE} on all other levels. \code{TRUE} on a lower level overwrites
\code{TRUE} on the higher levels.}

\item{type}{either "error" (equivalent to calling
\code{setErrorContext}/\code{stackError}), "warning" (equivalent to calling
\code{setWarningContext}/\code{stackWarning}), "message" (equivalent to
calling \code{setMessageContext}/\code{stackMessage}) or "none". In the
former cases, the condition object will inherit from "error", "warning" or
"message" and "condition", respectively. In the latter case only from
"condition".}

\item{...}{further \emph{named} elements to add to the condition object. If
elements with the same name are specified on multiple levels only the
lowest level one will be included.}
}
\value{
\code{set*Context} is invoked for its side effects, \code{stack*}
  returns a condition object.
}
\description{
\code{set*Context} is used to set condition contexts along the function call
stack and \code{stack*} to construct a condition object herefrom.
}
\seealso{
\code{\link{signal}} for the preferred way to signal a condition
  object constructed by \code{stack*}.
}

